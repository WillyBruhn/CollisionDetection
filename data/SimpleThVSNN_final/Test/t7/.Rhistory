# -1 because j starts with 1
ind = j + (j-1)*(numOfVars-1)
x[ind] = data$accX[i+j-1]/normalizeConstAcc
x[ind+1] = data$accY[i+j-1]/normalizeConstAcc
x[ind+2] = data$accZ[i+j-1]/normalizeConstAcc
if(numOfVars == 5){
x[ind+3] = data$lmspeed[i+j-1]/normalizeConstMotor
x[ind+4] = data$rmspeed[i+j-1]/normalizeConstMotor
}
#   ind = j + (j-1)*(numOfVars-1)
#print(ind)
}
if(data$collision[i+windowSize/2.0] == 1){
colCount = colCount + 1
y = 1
}
vals = c(i:(i+windowSize))
x[windowSize*numOfVars + 1] = min(data$accX[vals]/normalizeConstAcc)
x[windowSize*numOfVars + 2] = max(data$accX[vals]/normalizeConstAcc)
x[windowSize*numOfVars + 3] = mean(data$accX[vals]/normalizeConstAcc)
x[windowSize*numOfVars + 4] = mean(data$accX[vals]/normalizeConstAcc)*mean(data$accX[vals]/normalizeConstAcc)
x[windowSize*numOfVars + 5] = median(data$accX[vals]/normalizeConstAcc)
x[windowSize*numOfVars + 6] = median(data$accX[vals]/normalizeConstAcc)-mean(data$accX[vals]/normalizeConstAcc)
x[windowSize*numOfVars + 7] = (median(data$accX[vals]/normalizeConstAcc)-mean(data$accX[vals]/normalizeConstAcc))^2
x[windowSize*numOfVars + 8] = sum(data$accX[vals]/normalizeConstAcc)
x[windowSize*numOfVars + 9] = sd(data$accX[vals]/normalizeConstAcc)
x[windowSize*numOfVars + 10] = min(data$accY[vals]/normalizeConstAcc)
x[windowSize*numOfVars + 11] = max(data$accY[vals]/normalizeConstAcc)
x[windowSize*numOfVars + 12] = mean(data$accY[vals]/normalizeConstAcc)
x[windowSize*numOfVars + 13] = mean(data$accY[vals]/normalizeConstAcc)*mean(data$accY[vals]/normalizeConstAcc)
x[windowSize*numOfVars + 14] = median(data$accY[vals]/normalizeConstAcc)
x[windowSize*numOfVars + 15] = median(data$accY[vals]/normalizeConstAcc)-mean(data$accY[vals]/normalizeConstAcc)
x[windowSize*numOfVars + 16] = (median(data$accY[vals]/normalizeConstAcc)-mean(data$accY[vals]/normalizeConstAcc))^2
x[windowSize*numOfVars + 17] = sum(data$accY[vals]/normalizeConstAcc)
x[windowSize*numOfVars + 18] = sd(data$accY[vals]/normalizeConstAcc)
x[windowSize*numOfVars + 19] = min(data$accZ[vals]/normalizeConstAcc)
x[windowSize*numOfVars + 20] = max(data$accZ[vals]/normalizeConstAcc)
x[windowSize*numOfVars + 21] = mean(data$accZ[vals]/normalizeConstAcc)
x[windowSize*numOfVars + 22] = mean(data$accZ[vals]/normalizeConstAcc)*mean(data$accZ[vals]/normalizeConstAcc)
x[windowSize*numOfVars + 23] = median(data$accZ[vals]/normalizeConstAcc)
x[windowSize*numOfVars + 24] = median(data$accZ[vals]/normalizeConstAcc)-mean(data$accZ[vals]/normalizeConstAcc)
x[windowSize*numOfVars + 25] = (median(data$accZ[vals]/normalizeConstAcc)-mean(data$accZ[vals]/normalizeConstAcc))^2
x[windowSize*numOfVars + 26] = sum(data$accZ[vals]/normalizeConstAcc)
x[windowSize*numOfVars + 27] = sd(data$accZ[vals]/normalizeConstAcc)
#X = rbind(X,x)
#Y = rbind(Y,y)
X_[i,] = x
Y_[i,] = y
}
X <- data.frame(X_)
Y <- data.frame(Y_)
print(paste(colCount, " collisions"))
newList <- list("X" = X, "Y" = Y)
return(newList)
}
removeCollision <- function(data, col){
data$collision[col] = 0
return(data)
}
predictOffSet <- function(data, collisionCenter, viewSize, accFlag){
a = collisionCenter - viewSize/2.0
b = collisionCenter + viewSize/2.0
if(b < length(data$collision)){
if(accFlag == 1){
return(which.max(abs(data$accY[a:b]))-viewSize/2.0)
}
gx = which.max(abs(data$accX[a:b]))
gy = which.max(abs(data$accY[a:b]))
gz = which.max(abs(data$accZ[a:b]))
gx_max = abs(data$accX[a+gx-1])
gy_max = abs(data$accY[a+gy-1])
gz_max = abs(data$accZ[a+gz-1])
print(gx)
if(gx_max != max(abs(data$accX[a:b])) || gz_max != max(abs(data$accZ[a:b])) || gy_max != max(abs(data$accY[a:b]))) {
print(paste("error: ", gx_max, " !=? ", max(abs(data$accX[a:b]))))
print(paste("error: ", gy_max, " !=? ", max(abs(data$accY[a:b]))))
print(paste("error: ", gz_max, " !=? ", max(abs(data$accZ[a:b]))))
}
max_ind = gx
m = gx_max
if(gy_max > m){
max_ind = gy
m = gy_max
}
if(gz_max > m){
max_ind = gz
m = gz_max
}
return(max_ind-viewSize/2.0)
}
return(-999)
}
plotNN <- function(data){
colCenters = which(data$collision == 1)
NN_thresholds = rep(0,length(colCenters))
j = 1
for(i in colCenters){
if(i > 100 && i < length(data$collision) -100){
NN_thresholds[j] = max(data$NNoutput[c((i-100):(i+100))])
j = j+1
}
}
No_collisions = which(data$collision == 0)
pdf("NNoutput")
plot(data$NNoutput, main = paste("NNoutput avg during col: ", mean(NN_thresholds),sep = ""))
for(i in colCenters){
abline(v = i, col = "red")
}
dev.off()
for(i in c(1:length(data$collision))){
}
return(NN_thresholds)
}
NNWithThreshold <- function(data, th, toleranceWindow){
FP = 0
FN = 0
TP = 0
TN = 0
#
# for(i in c(200:(length(data$collision)-200))){
#   NNpred = FALSE
#   NNactual = FALSE
#
#   for(q in c(-5:5)){
#     if(data$NNoutput[i + q + 10] >= th){
#       NNpred = TRUE
#     }
#
#     if(data$collision[i + q] == 1){
#       NNactual = TRUE
#     }
#   }
#
#   if(NNpred == TRUE && NNactual == TRUE) TP = TP + 1
#   if(NNpred == FALSE && NNactual == TRUE) FN = FN + 1
#   if(NNpred == TRUE && NNactual == FALSE) FP = FP + 1
#   if(NNpred == FALSE && NNactual == FALSE) TN = TN + 1
# }
ws = 50
for(i in which(data$collision == 1)){
if(length(data$collision) > i + ws && i - ws > 0){
col_det = FALSE
for(q in c((-ws):(ws))){
if(data$NNoutput[i + q] >= th){
col_det = TRUE
}
}
if(col_det == TRUE) {
TP = TP + 1
offSet = predictOffSet(data,i,viewSize = viewSize/2.0, 2)
changeCollisionInData(data,i,i+offSet, windowSize = windowSize, viewSize = viewSize, ind = ind, colClass = colClass, paste("TP_" ,i, sep = ""))
}
else {
offSet = predictOffSet(data,i,viewSize = viewSize/2.0, 2)
changeCollisionInData(data,i,i+offSet, windowSize = windowSize, viewSize = viewSize, ind = ind, colClass = colClass, paste("FN_" ,i, sep = ""))
FN = FN + 1
}
}
}
lastIndexHigherThanTh = -1000
for(i in which(data$NNoutput >= th)){
if(length(data$collision) > i + ws && i - ws > 0 && i - lastIndexHigherThanTh > 100){
lastIndexHigherThanTh = i
actual_col = FALSE
for(q in c((-ws):(ws))){
if(data$collision[i + q] == 1){
actual_col = TRUE
}
}
if(actual_col == FALSE){
FP = FP + 1
offSet = predictOffSet(data,i,viewSize = viewSize/2.0, 2)
changeCollisionInData(data,i,i+offSet, windowSize = windowSize, viewSize = viewSize, ind = ind, colClass = colClass, paste("FP_" ,i, sep = ""), FALSE)
}
}
}
TN = length(data$collision) - FP - TP - FN
maxCrit = TN + TP
newList <- list("TP" = TP, "TN" = TN, "FN" = FN, "FP" = FP, "maxCrit" = maxCrit, "colCount" = length(which(data$collision == 1)) * 11, "th" = th)
return(newList)
}
eval <- function(y_test, y_prediction, th, toleranceWindow){
TP = 0
TN = 0
FP = 0
FN = 0
ws = toleranceWindow
t = 0
for(i in seq(1,length(y_test), ws)){
y_pred = 0
y = 0
for(j in 1:ws){
if(i +j <= length(y_test)){
if(y_prediction[i+j] >= th ){
y_pred = 1
}
if(y_test[i+j] == 1){
y = 1
}
}
}
if(y == 1 && y_pred == 1) TP = TP +1
if(y == 0 && y_pred == 1) FP = FP +1
if(y == 1 && y_pred == 0) FN = FN +1
if(y == 0 && y_pred == 0) TN = TN +1
t = t +1
}
maxCrit = TN + TP
newList <- list("TP" = TP, "TN" = TN, "FN" = FN, "FP" = FP, "maxCrit" = maxCrit, "total" = t, "th" = th)
return(newList)
}
setwd("/home/willy/10.Semester/Robotik/MyRobot/SerialPortListener/SimpleThVSNN_final/Test/t1")
colClass = 1
data = read.table("output.txt")
if(ncol(data) == 12) {
colnames(data) <- c("arduinoTime", "accX", "accY", "accZ", "gyroX", "gyroY", "gyroZ", "lmspeed", "rmspeed", "NNoutput", "collision", "pythonTime")
} else {
colnames(data) <- c("arduinoTime", "accX", "accY", "accZ", "gyroX", "gyroY", "gyroZ", "lmspeed", "rmspeed", "collision", "pythonTime")
}
data = na.omit(data)
plotSize = c(min(data$accX,data$accY, data$accZ), max(data$accX,data$accY, data$accZ))
collisionCenters = which(data$collision == 1)
length(collisionCenters)
# remove the last few entries
if(collisionCenters[length(collisionCenters)] > length(data$collision) - 50){
data = head(data,-100)
}
collisionCenters = which(data$collision == 1)
length(collisionCenters)
windowSize = 20
viewSize = 100
oldInd = 1
if(length(collisionCenters) != 0){
for(ind in 1:length(collisionCenters)){
if(oldInd == ind || collisionCenters[oldInd] + windowSize <= collisionCenters[ind]){
print(paste(collisionCenters[oldInd], " != ", collisionCenters[ind]))
print(paste("collision ", ind, " / ", length(collisionCenters)))
offSet = predictOffSet(data,collisionCenters[ind],viewSize = viewSize/2.0, 2)
if(offSet == -999){
data = removeCollision(data,collisionCenters[ind])
}
else {
adjustCollision(data,plotSize = plotSize,collisionCenter = collisionCenters[ind], windowSize = windowSize, viewSize = viewSize, offSet = offSet)
data = changeCollisionInData(data,collisionCenters[ind],collisionCenters[ind]+offSet, windowSize = windowSize, viewSize = viewSize, ind = ind, colClass = colClass)
}
}
else{
data = removeCollision(data,collisionCenters[ind])
}
oldInd = ind
}
}
#----------------------------------------------------------------------------------
# this was good
#----------------------------------------------------------------------------------
collisionCenters = which(data$collision == 1)
length(collisionCenters)
obj = generateNNTrainingsData(data,windowSize = windowSize, numOfVars = 8, 1, c(-10:10))
D = cbind(obj$X,obj$Y)
write.table(D, file = "NNtraining.csv", sep=",", col.names = T, row.names = F)
C = cbind(obj$X,obj$Y_noFrame)
write.table(C, file = "NNtrainingNoFrame.csv", sep=",", col.names = T, row.names = F)
if(ncol(data) == 12) {
plotNN(data)
# m_ = 0
# mOb = 0
# for(i in seq(0,1.0,0.01)){
#   ob = NNWithThreshold(data,i, toleranceWindow = 100)
#
#   # length(data$collision)
#   # length(data$NNoutput)
#
#   #ob = eval(data$collision, data$NNoutput, i, toleranceWindow = 100)
#
#   if(m_ <= ob$maxCrit ){
#     m_ = ob$maxCrit
#     mOb = ob
#   }
# }
mOb = NNWithThreshold(data,0.3, toleranceWindow = 100)
conf = matrix(c(mOb$TN,mOb$FP,mOb$FN,mOb$TP), byrow = TRUE, nrow = 2, ncol = 2, dimnames = list(c("keine Kollision","Kollision") ,c("keine Kollision vorhergesagt", "Kollision vorhergesagt")))
write.table(conf,file = paste("confusion_", mOb$th ,".csv", sep = ""), sep = ",", col.names=NA, quote=FALSE)
#write.table(conf,file = "confusion.csv",  sep = ";", col.names = FALSE, row.names = FALSE)
}
setwd("/home/willy/10.Semester/Robotik/MyRobot/SerialPortListener/SimpleThVSNN_final/Test/t2")
colClass = 1
data = read.table("output.txt")
if(ncol(data) == 12) {
colnames(data) <- c("arduinoTime", "accX", "accY", "accZ", "gyroX", "gyroY", "gyroZ", "lmspeed", "rmspeed", "NNoutput", "collision", "pythonTime")
} else {
colnames(data) <- c("arduinoTime", "accX", "accY", "accZ", "gyroX", "gyroY", "gyroZ", "lmspeed", "rmspeed", "collision", "pythonTime")
}
data = na.omit(data)
plotSize = c(min(data$accX,data$accY, data$accZ), max(data$accX,data$accY, data$accZ))
collisionCenters = which(data$collision == 1)
length(collisionCenters)
# remove the last few entries
if(collisionCenters[length(collisionCenters)] > length(data$collision) - 50){
data = head(data,-100)
}
collisionCenters = which(data$collision == 1)
length(collisionCenters)
windowSize = 20
viewSize = 100
oldInd = 1
if(length(collisionCenters) != 0){
for(ind in 1:length(collisionCenters)){
if(oldInd == ind || collisionCenters[oldInd] + windowSize <= collisionCenters[ind]){
print(paste(collisionCenters[oldInd], " != ", collisionCenters[ind]))
print(paste("collision ", ind, " / ", length(collisionCenters)))
offSet = predictOffSet(data,collisionCenters[ind],viewSize = viewSize/2.0, 2)
if(offSet == -999){
data = removeCollision(data,collisionCenters[ind])
}
else {
adjustCollision(data,plotSize = plotSize,collisionCenter = collisionCenters[ind], windowSize = windowSize, viewSize = viewSize, offSet = offSet)
data = changeCollisionInData(data,collisionCenters[ind],collisionCenters[ind]+offSet, windowSize = windowSize, viewSize = viewSize, ind = ind, colClass = colClass)
}
}
else{
data = removeCollision(data,collisionCenters[ind])
}
oldInd = ind
}
}
#----------------------------------------------------------------------------------
# this was good
#----------------------------------------------------------------------------------
collisionCenters = which(data$collision == 1)
length(collisionCenters)
obj = generateNNTrainingsData(data,windowSize = windowSize, numOfVars = 8, 1, c(-10:10))
D = cbind(obj$X,obj$Y)
write.table(D, file = "NNtraining.csv", sep=",", col.names = T, row.names = F)
C = cbind(obj$X,obj$Y_noFrame)
write.table(C, file = "NNtrainingNoFrame.csv", sep=",", col.names = T, row.names = F)
if(ncol(data) == 12) {
plotNN(data)
# m_ = 0
# mOb = 0
# for(i in seq(0,1.0,0.01)){
#   ob = NNWithThreshold(data,i, toleranceWindow = 100)
#
#   # length(data$collision)
#   # length(data$NNoutput)
#
#   #ob = eval(data$collision, data$NNoutput, i, toleranceWindow = 100)
#
#   if(m_ <= ob$maxCrit ){
#     m_ = ob$maxCrit
#     mOb = ob
#   }
# }
mOb = NNWithThreshold(data,0.3, toleranceWindow = 100)
conf = matrix(c(mOb$TN,mOb$FP,mOb$FN,mOb$TP), byrow = TRUE, nrow = 2, ncol = 2, dimnames = list(c("keine Kollision","Kollision") ,c("keine Kollision vorhergesagt", "Kollision vorhergesagt")))
write.table(conf,file = paste("confusion_", mOb$th ,".csv", sep = ""), sep = ",", col.names=NA, quote=FALSE)
#write.table(conf,file = "confusion.csv",  sep = ";", col.names = FALSE, row.names = FALSE)
}
# i = 100
# i = 100
# offSet = predictOffSet(data,i,viewSize = viewSize/2.0, 2)
# i = 100
# offSet = predictOffSet(data,i,viewSize = viewSize/2.0, 2)
# changeCollisionInData(data,i,i+offSet, windowSize = windowSize, viewSize = viewSize, ind = ind, colClass = colClass, paste("TN_" ,i, sep = ""), FALSE)
# i = 100
# offSet = predictOffSet(data,i,viewSize = viewSize/2.0, 2)
# changeCollisionInData(data,i,i+offSet, windowSize = windowSize, viewSize = viewSize, ind = ind, colClass = colClass, paste("TN_" ,i, sep = ""), FALSE)
# i = 100
# offSet = predictOffSet(data,i,viewSize = viewSize/2.0, 2)
# changeCollisionInData(data,i,i+offSet, windowSize = windowSize, viewSize = viewSize, ind = ind, colClass = colClass, paste("TN_" ,i, sep = ""), FALSE)
# i = 100
# offSet = predictOffSet(data,i,viewSize = viewSize/2.0, 2)
# changeCollisionInData(data,i,i+offSet, windowSize = windowSize, viewSize = viewSize, ind = ind, colClass = colClass, paste("TN_" ,i, sep = ""), FALSE)
# i = 100
# offSet = predictOffSet(data,i,viewSize = viewSize/2.0, 2)
# changeCollisionInData(data,i,i+offSet, windowSize = windowSize, viewSize = viewSize, ind = ind, colClass = colClass, paste("TN_" ,i, sep = ""), FALSE)
# i = 100
# offSet = predictOffSet(data,i,viewSize = viewSize/2.0, 2)
# changeCollisionInData(data,i,i+offSet, windowSize = windowSize, viewSize = viewSize, ind = ind, colClass = colClass, paste("TN_" ,i, sep = ""), FALSE)
# i = 100
# offSet = predictOffSet(data,i,viewSize = viewSize/2.0, 2)
# changeCollisionInData(data,i,i+offSet, windowSize = windowSize, viewSize = viewSize, ind = ind, colClass = colClass, paste("TN_" ,i, sep = ""), FALSE)
setwd("/home/willy/10.Semester/Robotik/MyRobot/SerialPortListener/SimpleThVSNN_final/Test/t7")
colClass = 1
data = read.table("output.txt")
if(ncol(data) == 12) {
colnames(data) <- c("arduinoTime", "accX", "accY", "accZ", "gyroX", "gyroY", "gyroZ", "lmspeed", "rmspeed", "NNoutput", "collision", "pythonTime")
} else {
colnames(data) <- c("arduinoTime", "accX", "accY", "accZ", "gyroX", "gyroY", "gyroZ", "lmspeed", "rmspeed", "collision", "pythonTime")
}
data = na.omit(data)
plotSize = c(min(data$accX,data$accY, data$accZ), max(data$accX,data$accY, data$accZ))
collisionCenters = which(data$collision == 1)
length(collisionCenters)
# remove the last few entries
if(collisionCenters[length(collisionCenters)] > length(data$collision) - 50){
data = head(data,-100)
}
collisionCenters = which(data$collision == 1)
length(collisionCenters)
windowSize = 20
viewSize = 100
oldInd = 1
if(length(collisionCenters) != 0){
for(ind in 1:length(collisionCenters)){
if(oldInd == ind || collisionCenters[oldInd] + windowSize <= collisionCenters[ind]){
print(paste(collisionCenters[oldInd], " != ", collisionCenters[ind]))
print(paste("collision ", ind, " / ", length(collisionCenters)))
offSet = predictOffSet(data,collisionCenters[ind],viewSize = viewSize/2.0, 2)
if(offSet == -999){
data = removeCollision(data,collisionCenters[ind])
}
else {
adjustCollision(data,plotSize = plotSize,collisionCenter = collisionCenters[ind], windowSize = windowSize, viewSize = viewSize, offSet = offSet)
data = changeCollisionInData(data,collisionCenters[ind],collisionCenters[ind]+offSet, windowSize = windowSize, viewSize = viewSize, ind = ind, colClass = colClass)
}
}
else{
data = removeCollision(data,collisionCenters[ind])
}
oldInd = ind
}
}
#----------------------------------------------------------------------------------
# this was good
#----------------------------------------------------------------------------------
collisionCenters = which(data$collision == 1)
length(collisionCenters)
obj = generateNNTrainingsData(data,windowSize = windowSize, numOfVars = 8, 1, c(-10:10))
D = cbind(obj$X,obj$Y)
write.table(D, file = "NNtraining.csv", sep=",", col.names = T, row.names = F)
C = cbind(obj$X,obj$Y_noFrame)
write.table(C, file = "NNtrainingNoFrame.csv", sep=",", col.names = T, row.names = F)
if(ncol(data) == 12) {
plotNN(data)
# m_ = 0
# mOb = 0
# for(i in seq(0,1.0,0.01)){
#   ob = NNWithThreshold(data,i, toleranceWindow = 100)
#
#   # length(data$collision)
#   # length(data$NNoutput)
#
#   #ob = eval(data$collision, data$NNoutput, i, toleranceWindow = 100)
#
#   if(m_ <= ob$maxCrit ){
#     m_ = ob$maxCrit
#     mOb = ob
#   }
# }
mOb = NNWithThreshold(data,0.3, toleranceWindow = 100)
conf = matrix(c(mOb$TN,mOb$FP,mOb$FN,mOb$TP), byrow = TRUE, nrow = 2, ncol = 2, dimnames = list(c("keine Kollision","Kollision") ,c("keine Kollision vorhergesagt", "Kollision vorhergesagt")))
write.table(conf,file = paste("confusion_", mOb$th ,".csv", sep = ""), sep = ",", col.names=NA, quote=FALSE)
#write.table(conf,file = "confusion.csv",  sep = ";", col.names = FALSE, row.names = FALSE)
}
# i = 100
# i = 100
# offSet = predictOffSet(data,i,viewSize = viewSize/2.0, 2)
# i = 100
# offSet = predictOffSet(data,i,viewSize = viewSize/2.0, 2)
# changeCollisionInData(data,i,i+offSet, windowSize = windowSize, viewSize = viewSize, ind = ind, colClass = colClass, paste("TN_" ,i, sep = ""), FALSE)
# i = 100
# offSet = predictOffSet(data,i,viewSize = viewSize/2.0, 2)
# changeCollisionInData(data,i,i+offSet, windowSize = windowSize, viewSize = viewSize, ind = ind, colClass = colClass, paste("TN_" ,i, sep = ""), FALSE)
# i = 100
# offSet = predictOffSet(data,i,viewSize = viewSize/2.0, 2)
# changeCollisionInData(data,i,i+offSet, windowSize = windowSize, viewSize = viewSize, ind = ind, colClass = colClass, paste("TN_" ,i, sep = ""), FALSE)
# i = 100
# offSet = predictOffSet(data,i,viewSize = viewSize/2.0, 2)
# changeCollisionInData(data,i,i+offSet, windowSize = windowSize, viewSize = viewSize, ind = ind, colClass = colClass, paste("TN_" ,i, sep = ""), FALSE)
# i = 100
# offSet = predictOffSet(data,i,viewSize = viewSize/2.0, 2)
# changeCollisionInData(data,i,i+offSet, windowSize = windowSize, viewSize = viewSize, ind = ind, colClass = colClass, paste("TN_" ,i, sep = ""), FALSE)
# i = 100
# offSet = predictOffSet(data,i,viewSize = viewSize/2.0, 2)
# changeCollisionInData(data,i,i+offSet, windowSize = windowSize, viewSize = viewSize, ind = ind, colClass = colClass, paste("TN_" ,i, sep = ""), FALSE)
# i = 100
# offSet = predictOffSet(data,i,viewSize = viewSize/2.0, 2)
# changeCollisionInData(data,i,i+offSet, windowSize = windowSize, viewSize = viewSize, ind = ind, colClass = colClass, paste("TN_" ,i, sep = ""), FALSE)
# i = 100
# offSet = predictOffSet(data,i,viewSize = viewSize/2.0, 2)
# changeCollisionInData(data,i,i+offSet, windowSize = windowSize, viewSize = viewSize, ind = ind, colClass = colClass, paste("TN_" ,i, sep = ""), FALSE)
# i = 100
# offSet = predictOffSet(data,i,viewSize = viewSize/2.0, 2)
# changeCollisionInData(data,i,i+offSet, windowSize = windowSize, viewSize = viewSize, ind = ind, colClass = colClass, paste("TN_" ,i, sep = ""), FALSE)
# i = 100
# offSet = predictOffSet(data,i,viewSize = viewSize/2.0, 2)
# changeCollisionInData(data,i,i+offSet, windowSize = windowSize, viewSize = viewSize, ind = ind, colClass = colClass, paste("TN_" ,i, sep = ""), FALSE)
# i = 100
# offSet = predictOffSet(data,i,viewSize = viewSize/2.0, 2)
# changeCollisionInData(data,i,i+offSet, windowSize = windowSize, viewSize = viewSize, ind = ind, colClass = colClass, paste("TN_" ,i, sep = ""), FALSE)
i = 600
offSet = predictOffSet(data,i,viewSize = viewSize/2.0, 2)
changeCollisionInData(data,i,i+offSet, windowSize = windowSize, viewSize = viewSize, ind = ind, colClass = colClass, paste("TN_" ,i, sep = ""), FALSE)
i = 1200
offSet = predictOffSet(data,i,viewSize = viewSize/2.0, 2)
changeCollisionInData(data,i,i+offSet, windowSize = windowSize, viewSize = viewSize, ind = ind, colClass = colClass, paste("TN_" ,i, sep = ""), FALSE)
i = 1100
offSet = predictOffSet(data,i,viewSize = viewSize/2.0, 2)
changeCollisionInData(data,i,i+offSet, windowSize = windowSize, viewSize = viewSize, ind = ind, colClass = colClass, paste("TN_" ,i, sep = ""), FALSE)
i = 1000
offSet = predictOffSet(data,i,viewSize = viewSize/2.0, 2)
changeCollisionInData(data,i,i+offSet, windowSize = windowSize, viewSize = viewSize, ind = ind, colClass = colClass, paste("TN_" ,i, sep = ""), FALSE)
i = 5800
offSet = predictOffSet(data,i,viewSize = viewSize/2.0, 2)
changeCollisionInData(data,i,i+offSet, windowSize = windowSize, viewSize = viewSize, ind = ind, colClass = colClass, paste("TN_" ,i, sep = ""), FALSE)
i = 5900
offSet = predictOffSet(data,i,viewSize = viewSize/2.0, 2)
changeCollisionInData(data,i,i+offSet, windowSize = windowSize, viewSize = viewSize, ind = ind, colClass = colClass, paste("TN_" ,i, sep = ""), FALSE)
i = 5820
offSet = predictOffSet(data,i,viewSize = viewSize/2.0, 2)
changeCollisionInData(data,i,i+offSet, windowSize = windowSize, viewSize = viewSize, ind = ind, colClass = colClass, paste("TN_" ,i, sep = ""), FALSE)
citation(package = "rpart", lib.loc = NULL, auto = NULL)
