ret[9] = sum(abs(V))
# x[windowSize*numOfVars + 3] = mean(V)
# x[windowSize*numOfVars + 4] = mean(V)*mean(V)
# x[windowSize*numOfVars + 5] = median(V)
# x[windowSize*numOfVars + 6] = median(V)-mean(V)
# x[windowSize*numOfVars + 7] = (median(V)-mean(V))^2
# x[windowSize*numOfVars + 8] = sum(V)
# x[windowSize*numOfVars + 9] = sd(V)
return(ret)
}
# obj = generateNNTrainingsDataWithFeatures2(data,windowSize = windowSize, numOfVars = 8, overlap = windowSize/2.0, c(-windowSize/2.0:windowSize/2.0))
obj = generateNNTrainingsDataWithFeatures2(data,windowSize = windowSize, numOfVars = 8, overlap = 1, c(1:1))
C = cbind(obj$X,obj$Y_noFrame)
write.table(C, file = "NNtrainingMultiClassFeatures.csv", sep=",", col.names = T, row.names = F)
p = obj$X[which(obj$Y_noFrame == colClass),]
q = colMeans(p, na.rm=TRUE)
p2 = obj$X[which(obj$Y_noFrame != colClass),]
# obj = generateNNTrainingsDataWithFeatures2(data,windowSize = windowSize, numOfVars = 8, overlap = windowSize/2.0, c(-windowSize/2.0:windowSize/2.0))
obj = generateNNTrainingsDataWithFeatures2(data,windowSize = windowSize, numOfVars = 8, overlap = 1, c(1:1))
C = cbind(obj$X,obj$Y_noFrame)
write.table(C, file = "NNtrainingMultiClassFeatures.csv", sep=",", col.names = T, row.names = F)
p = obj$X[which(obj$Y_noFrame == colClass),]
q = colMeans(p, na.rm=TRUE)
p2 = obj$X[which(obj$Y_noFrame != colClass),]
q2 = colMeans(p2, na.rm=TRUE)
par(mfrow =c(2,1))
plot(q, main = "collision")
plot(q2, main = "no collision")
par(mfrow =c(2,1))
plot(q, main = "collision (b) vs no collision (r)", col = "blue")
points(q2, col = "red")
par(mfrow =c(1,1))
plot(q, main = "collision (b) vs no collision (r)", col = "blue")
points(q2, col = "red")
q_acc_x = q[seq(1,length(q),8)]
plot(q_acc_x)
setwd("/home/willy/10.Semester/Robotik/MyRobot/SerialPortListener/Training/s4")
str1 = sub(".*/", "", wd)
str1 = sub("[0-9]+", "", str1)
str1
colClass = 1
if(str1 == "s"){
colClass = 2
} else if(str1 == "f"){
colClass = 3
} else if(str1 == "t"){
colClass = 4
}
data = read.table("output.txt", col.names = c("arduinoTime", "accX", "accY", "accZ", "gyroX", "gyroY", "gyroZ", "lmspeed", "rmspeed", "collision", "pythonTime"), fill = TRUE)
data = na.omit(data)
plotSize = c(min(data$accX,data$accY, data$accZ), max(data$accX,data$accY, data$accZ))
collisionCenters = which(data$collision == 1)
length(collisionCenters)
#windowSize = 20
viewSize = 100
oldInd = 1
if(length(collisionCenters) != 0){
for(ind in 1:length(collisionCenters)){
if(oldInd == ind || collisionCenters[oldInd] + windowSize <= collisionCenters[ind]){
print(paste(collisionCenters[oldInd], " != ", collisionCenters[ind]))
print(paste("collision ", ind, " / ", length(collisionCenters)))
offSet = predictOffSet(data,collisionCenters[ind],viewSize = viewSize/2.0, 2)
adjustCollision(data,plotSize = plotSize,collisionCenter = collisionCenters[ind], windowSize = windowSize, viewSize = viewSize, offSet = offSet)
data = changeCollisionInData(data,collisionCenters[ind],collisionCenters[ind]+offSet, windowSize = windowSize, viewSize = viewSize, ind = ind, colClass = colClass)
}
else{
data = removeCollision(data,collisionCenters[ind])
}
oldInd = ind
}
}
#----------------------------------------------------------------------------------
# this was good
#----------------------------------------------------------------------------------
obj = generateNNTrainingsData(data,windowSize = windowSize, numOfVars = 8, 1, c(-2:2))
D = cbind(obj$X,obj$Y)
write.table(D, file = "NNtrainingMultiClass.csv", sep=",", col.names = T, row.names = F)
C = cbind(obj$X,obj$Y_noFrame)
write.table(C, file = "NNtrainingMultiClassNoFrame.csv", sep=",", col.names = T, row.names = F)
p = obj$X[which(obj$Y_noFrame == colClass),]
q = colMeans(p, na.rm=TRUE)
q_acc_x = q[seq(1,length(q),8)]
plot(q_acc_x)
plot(q_acc_x, type = "l")
plot(q_acc_x, type = "l", col = "red")
points(q_acc_y, type = "l", col = "green")
points(q_acc_z, type = "l", col = "blue")
q_acc_x = q[seq(1,length(q),8)]
q_acc_y = q[seq(2,length(q),8)]
q_acc_z = q[seq(3,length(q),8)]
q_g_x = q[seq(4,length(q),8)]
q_g_y = q[seq(5,length(q),8)]
q_g_z = q[seq(6,length(q),8)]
plot(q_acc_x, type = "l", col = "red")
points(q_acc_y, type = "l", col = "green")
points(q_acc_z, type = "l", col = "blue")
plot(q_acc_y, type = "l", col = "green")
points(q_acc_x, type = "l", col = "red")
points(q_acc_z, type = "l", col = "blue")
par(mfrow =c(1,1))
plot(q_acc_y, type = "l", col = "green", main = "collision")
points(q_acc_x, type = "l", col = "red")
points(q_acc_z, type = "l", col = "blue")
points(q_acc_y, type = "dotted", col = "green", main = "collision")
plot(q_acc_y, type = "l", col = "green", main = "collision")
points(q_acc_x, type = "l", col = "red")
points(q_acc_z, type = "l", col = "blue")
points(q2_acc_y, type = "dashed", col = "green", main = "collision")
p = obj$X[which(obj$Y_noFrame == colClass),]
q = colMeans(p, na.rm=TRUE)
q_acc_x = q[seq(1,length(q),8)]
q_acc_y = q[seq(2,length(q),8)]
q_acc_z = q[seq(3,length(q),8)]
q_g_x = q[seq(4,length(q),8)]
q_g_y = q[seq(5,length(q),8)]
q_g_z = q[seq(6,length(q),8)]
p2 = obj$X[which(obj$Y_noFrame != colClass),]
q2 = colMeans(p2, na.rm=TRUE)
q2_acc_x = q2[seq(1,length(q),8)]
q2_acc_y = q2[seq(2,length(q),8)]
q2_acc_z = q2[seq(3,length(q),8)]
q2_g_x = q2[seq(4,length(q),8)]
q2_g_y = q2[seq(5,length(q),8)]
q2_g_z = q2[seq(6,length(q),8)]
par(mfrow =c(1,1))
plot(q_acc_y, type = "l", col = "green", main = "collision")
points(q_acc_x, type = "l", col = "red")
points(q_acc_z, type = "l", col = "blue")
points(q2_acc_y, type = "dashed", col = "green", main = "collision")
points(q2_acc_x, type = "dashed", col = "red")
points(q2_acc_z, type = "dashed", col = "blue")
plot(q_acc_y, type = "l", col = "green", main = "collision")
points(q_acc_x, type = "l", col = "red")
points(q_acc_z, type = "l", col = "blue")
points(q2_acc_y, type = "l", lty = 2, col = "green", main = "collision")
points(q2_acc_x, type = "l", lty = 2, col = "red")
points(q2_acc_z, type = "l", lty = 2, col = "blue")
plot(q_acc_y, type = "l", col = "green", main = "collision")
points(q_acc_x, type = "l", col = "red")
points(q_acc_z, type = "l", col = "blue")
points(q2_acc_y, type = "l", lty = 2, col = "green", main = "collision")
points(q2_acc_x, type = "l", lty = 2, col = "red")
points(q2_acc_z, type = "l", lty = 2, col = "blue")
plot(q_g_x, type = "l", col = "green", main = "collision")
points(q_g_y, type = "l", col = "red")
points(q_g_z, type = "l", col = "blue")
points(q2_g_x, type = "l", lty = 2, col = "green", main = "collision")
points(q2_g_y, type = "l", lty = 2, col = "red")
points(q2_g_z, type = "l", lty = 2, col = "blue")
par(mfrow =c(2,1))
plot(q_acc_y, type = "l", col = "green", main = "collision")
points(q_acc_x, type = "l", col = "red")
points(q_acc_z, type = "l", col = "blue")
points(q2_acc_y, type = "l", lty = 2, col = "green", main = "collision")
points(q2_acc_x, type = "l", lty = 2, col = "red")
points(q2_acc_z, type = "l", lty = 2, col = "blue")
plot(q_g_x, type = "l", col = "green", main = "collision")
points(q_g_y, type = "l", col = "red")
points(q_g_z, type = "l", col = "blue")
points(q2_g_x, type = "l", lty = 2, col = "green", main = "collision")
points(q2_g_y, type = "l", lty = 2, col = "red")
points(q2_g_z, type = "l", lty = 2, col = "blue")
data = read.table("output.txt", col.names = c("arduinoTime", "accX", "accY", "accZ", "gyroX", "gyroY", "gyroZ", "lmspeed", "rmspeed", "collision", "pythonTime"), fill = TRUE)
data = na.omit(data)
plotSize = c(min(data$accX,data$accY, data$accZ), max(data$accX,data$accY, data$accZ))
collisionCenters = which(data$collision == 1)
length(collisionCenters)
windowSize = 40
#windowSize = 40
viewSize = 100
oldInd = 1
if(length(collisionCenters) != 0){
for(ind in 1:length(collisionCenters)){
if(oldInd == ind || collisionCenters[oldInd] + windowSize <= collisionCenters[ind]){
print(paste(collisionCenters[oldInd], " != ", collisionCenters[ind]))
print(paste("collision ", ind, " / ", length(collisionCenters)))
offSet = predictOffSet(data,collisionCenters[ind],viewSize = viewSize/2.0, 2)
adjustCollision(data,plotSize = plotSize,collisionCenter = collisionCenters[ind], windowSize = windowSize, viewSize = viewSize, offSet = offSet)
data = changeCollisionInData(data,collisionCenters[ind],collisionCenters[ind]+offSet, windowSize = windowSize, viewSize = viewSize, ind = ind, colClass = colClass)
}
else{
data = removeCollision(data,collisionCenters[ind])
}
oldInd = ind
}
}
#----------------------------------------------------------------------------------
# this was good
#----------------------------------------------------------------------------------
obj = generateNNTrainingsData(data,windowSize = windowSize, numOfVars = 8, 1, c(-2:2))
D = cbind(obj$X,obj$Y)
write.table(D, file = "NNtrainingMultiClass.csv", sep=",", col.names = T, row.names = F)
C = cbind(obj$X,obj$Y_noFrame)
write.table(C, file = "NNtrainingMultiClassNoFrame.csv", sep=",", col.names = T, row.names = F)
p = obj$X[which(obj$Y_noFrame == colClass),]
q = colMeans(p, na.rm=TRUE)
q_acc_x = q[seq(1,length(q),8)]
q_acc_y = q[seq(2,length(q),8)]
q_acc_z = q[seq(3,length(q),8)]
q_g_x = q[seq(4,length(q),8)]
q_g_y = q[seq(5,length(q),8)]
q_g_z = q[seq(6,length(q),8)]
p2 = obj$X[which(obj$Y_noFrame != colClass),]
q2 = colMeans(p2, na.rm=TRUE)
q2_acc_x = q2[seq(1,length(q),8)]
q2_acc_y = q2[seq(2,length(q),8)]
q2_acc_z = q2[seq(3,length(q),8)]
q2_g_x = q2[seq(4,length(q),8)]
q2_g_y = q2[seq(5,length(q),8)]
q2_g_z = q2[seq(6,length(q),8)]
pdf("ColVsNoCol.pdf")
par(mfrow =c(2,1))
plot(q_acc_y, type = "l", col = "green", main = "collision")
points(q_acc_x, type = "l", col = "red")
points(q_acc_z, type = "l", col = "blue")
points(q2_acc_y, type = "l", lty = 2, col = "green", main = "collision")
points(q2_acc_x, type = "l", lty = 2, col = "red")
points(q2_acc_z, type = "l", lty = 2, col = "blue")
plot(q_g_x, type = "l", col = "green", main = "collision")
points(q_g_y, type = "l", col = "red")
points(q_g_z, type = "l", col = "blue")
points(q2_g_x, type = "l", lty = 2, col = "green", main = "collision")
points(q2_g_y, type = "l", lty = 2, col = "red")
points(q2_g_z, type = "l", lty = 2, col = "blue")
pdf("ColVsNoCol.pdf")
par(mfrow =c(2,1))
plot(q_acc_y, type = "l", col = "green", main = "collision")
points(q_acc_x, type = "l", col = "red")
points(q_acc_z, type = "l", col = "blue")
points(q2_acc_y, type = "l", lty = 2, col = "green", main = "collision")
points(q2_acc_x, type = "l", lty = 2, col = "red")
points(q2_acc_z, type = "l", lty = 2, col = "blue")
plot(q_g_x, type = "l", col = "green", main = "collision")
points(q_g_y, type = "l", col = "red")
points(q_g_z, type = "l", col = "blue")
points(q2_g_x, type = "l", lty = 2, col = "green", main = "collision")
points(q2_g_y, type = "l", lty = 2, col = "red")
points(q2_g_z, type = "l", lty = 2, col = "blue")
dev.off()
svg(filename = paste("noCollision", ind, "_", a, ".svg",sep = "") ,width = 8, height = 10.64)
plotWithoutCollision <- function(data, viewSize, a, b){
svg(filename = paste("noCollision", ind, "_", a, ".svg",sep = "") ,width = 8, height = 10.64)
par(mfrow=c(3,1))
#par(oma=c(1,1,1,1))
plot(data$accX[a:b], type = 'l', main = "acc", ylim = plotSize, col = "red")
points(data$accY[a:b], type = 'l', main = "y", ylim = plotSize, col = "green")
points(data$accZ[a:b], type = 'l', main = "z", ylim = plotSize, col = "blue")
minG = min(min(data$gyroX[a:b]), min(data$gyroZ[a:b]), min(data$gyroY[a:b]))
maxG = max(max(data$gyroX[a:b]), max(data$gyroZ[a:b]), max(data$gyroY[a:b]))
gyroPlotSize = c(minG,maxG)
plot(data$gyroX[a:b], type = 'l', main = "gyro", ylim = gyroPlotSize, col = "red")
points(data$gyroY[a:b], type = 'l', main = "gy", ylim = gyroPlotSize, col = "green")
points(data$gyroZ[a:b], type = 'l', main = "zg", ylim = gyroPlotSize, col = "blue")
plot(data$lmspeed[a:b], type = 'l', main = "motor")
points(data$rmspeed[a:b], type = 'l')
dev.off()
}
plotWithoutCollision <- function(data, viewSize, a){
svg(filename = paste("noCollision", ind, "_", a, ".svg",sep = "") ,width = 8, height = 10.64)
par(mfrow=c(3,1))
b = a + viewSize
#par(oma=c(1,1,1,1))
plot(data$accX[a:b], type = 'l', main = "acc", ylim = plotSize, col = "red")
points(data$accY[a:b], type = 'l', main = "y", ylim = plotSize, col = "green")
points(data$accZ[a:b], type = 'l', main = "z", ylim = plotSize, col = "blue")
minG = min(min(data$gyroX[a:b]), min(data$gyroZ[a:b]), min(data$gyroY[a:b]))
maxG = max(max(data$gyroX[a:b]), max(data$gyroZ[a:b]), max(data$gyroY[a:b]))
gyroPlotSize = c(minG,maxG)
plot(data$gyroX[a:b], type = 'l', main = "gyro", ylim = gyroPlotSize, col = "red")
points(data$gyroY[a:b], type = 'l', main = "gy", ylim = gyroPlotSize, col = "green")
points(data$gyroZ[a:b], type = 'l', main = "zg", ylim = gyroPlotSize, col = "blue")
plot(data$lmspeed[a:b], type = 'l', main = "motor")
points(data$rmspeed[a:b], type = 'l')
dev.off()
}
plotWithoutCollision(data, viewSize, 20)
plotWithoutCollision(data, viewSize, 200)
plotWithoutCollision(data, viewSize, 2000)
plotWithoutCollision <- function(data, viewSize, a){
svg(filename = paste("noCollision", ind, "_", a, ".svg",sep = "") ,width = 8, height = 10.64)
par(mfrow=c(3,1))
b = a + viewSize
#par(oma=c(1,1,1,1))
plot(data$accX[a:b], type = 'l', main = "acc", ylim = plotSize, col = "red")
points(data$accY[a:b], type = 'l', main = "y", ylim = plotSize, col = "green")
points(data$accZ[a:b], type = 'l', main = "z", ylim = plotSize, col = "blue")
minG = min(min(data$gyroX[a:b]), min(data$gyroZ[a:b]), min(data$gyroY[a:b]))
maxG = max(max(data$gyroX[a:b]), max(data$gyroZ[a:b]), max(data$gyroY[a:b]))
gyroPlotSize = c(minG,maxG)
gyroPlotSize = c(-100,100)
plot(data$gyroX[a:b], type = 'l', main = "gyro", ylim = gyroPlotSize, col = "red")
points(data$gyroY[a:b], type = 'l', main = "gy", ylim = gyroPlotSize, col = "green")
points(data$gyroZ[a:b], type = 'l', main = "zg", ylim = gyroPlotSize, col = "blue")
plot(data$lmspeed[a:b], type = 'l', main = "motor")
points(data$rmspeed[a:b], type = 'l')
dev.off()
}
plotWithoutCollision(data, viewSize, 2000)
plotWithoutCollision <- function(data, viewSize, a, accLim, gyroLim){
svg(filename = paste("noCollision", ind, "_", a, ".svg",sep = "") ,width = 8, height = 10.64)
par(mfrow=c(3,1))
b = a + viewSize
#par(oma=c(1,1,1,1))
plot(data$accX[a:b], type = 'l', main = "acc", ylim = plotSize, col = "red", ylim = accLim)
points(data$accY[a:b], type = 'l', main = "y", ylim = plotSize, col = "green")
points(data$accZ[a:b], type = 'l', main = "z", ylim = plotSize, col = "blue")
minG = min(min(data$gyroX[a:b]), min(data$gyroZ[a:b]), min(data$gyroY[a:b]))
maxG = max(max(data$gyroX[a:b]), max(data$gyroZ[a:b]), max(data$gyroY[a:b]))
gyroPlotSize = c(minG,maxG)
gyroPlotSize = c(-100,100)
plot(data$gyroX[a:b], type = 'l', main = "gyro", ylim = gyroPlotSize, col = "red", ylim = gyroLim)
points(data$gyroY[a:b], type = 'l', main = "gy", ylim = gyroPlotSize, col = "green")
points(data$gyroZ[a:b], type = 'l', main = "zg", ylim = gyroPlotSize, col = "blue")
plot(data$lmspeed[a:b], type = 'l', main = "motor")
points(data$rmspeed[a:b], type = 'l')
dev.off()
}
plotWithoutCollision(data, viewSize, 2000, c(-10,30), c(-90,20))
plotWithoutCollision <- function(data, viewSize, a, accLim, gyroLim){
svg(filename = paste("noCollision", ind, "_", a, ".svg",sep = "") ,width = 8, height = 10.64)
par(mfrow=c(3,1))
b = a + viewSize
#par(oma=c(1,1,1,1))
plot(data$accX[a:b], type = 'l', main = "acc", ylim = accLim, col = "red")
points(data$accY[a:b], type = 'l', main = "y", ylim = accLim, col = "green")
points(data$accZ[a:b], type = 'l', main = "z", ylim = accLim, col = "blue")
minG = min(min(data$gyroX[a:b]), min(data$gyroZ[a:b]), min(data$gyroY[a:b]))
maxG = max(max(data$gyroX[a:b]), max(data$gyroZ[a:b]), max(data$gyroY[a:b]))
gyroPlotSize = c(minG,maxG)
gyroPlotSize = c(-100,100)
plot(data$gyroX[a:b], type = 'l', main = "gyro", ylim = gyroLim, col = "red")
points(data$gyroY[a:b], type = 'l', main = "gy", ylim = gyroLim, col = "green")
points(data$gyroZ[a:b], type = 'l', main = "zg", ylim = gyroLim, col = "blue")
plot(data$lmspeed[a:b], type = 'l', main = "motor")
points(data$rmspeed[a:b], type = 'l')
dev.off()
}
plotWithoutCollision(data, viewSize, 2000, c(-10,30), c(-90,20))
plotWithoutCollision(data, viewSize, 9500, c(-10,30), c(-90,20))
plotWithoutCollision(data, viewSize*10, 9500, c(-10,30), c(-90,20))
str1 = sub(".*/", "", wd)
str1 = sub("[0-9]+", "", str1)
str1
colClass = 1
if(str1 == "s"){
colClass = 2
} else if(str1 == "f"){
colClass = 3
} else if(str1 == "t"){
colClass = 4
}
data = read.table("output.txt", col.names = c("arduinoTime", "accX", "accY", "accZ", "gyroX", "gyroY", "gyroZ", "lmspeed", "rmspeed", "collision", "pythonTime"), fill = TRUE)
data = na.omit(data)
plotSize = c(min(data$accX,data$accY, data$accZ), max(data$accX,data$accY, data$accZ))
collisionCenters = which(data$collision == 1)
length(collisionCenters)
#windowSize = 40
viewSize = 100
oldInd = 1
if(length(collisionCenters) != 0){
for(ind in 1:length(collisionCenters)){
if(oldInd == ind || collisionCenters[oldInd] + windowSize <= collisionCenters[ind]){
print(paste(collisionCenters[oldInd], " != ", collisionCenters[ind]))
print(paste("collision ", ind, " / ", length(collisionCenters)))
offSet = predictOffSet(data,collisionCenters[ind],viewSize = viewSize/2.0, 2)
adjustCollision(data,plotSize = plotSize,collisionCenter = collisionCenters[ind], windowSize = windowSize, viewSize = viewSize, offSet = offSet)
data = changeCollisionInData(data,collisionCenters[ind],collisionCenters[ind]+offSet, windowSize = windowSize, viewSize = viewSize, ind = ind, colClass = colClass)
}
else{
data = removeCollision(data,collisionCenters[ind])
}
oldInd = ind
}
}
#----------------------------------------------------------------------------------
# this was good
#----------------------------------------------------------------------------------
obj = generateNNTrainingsData(data,windowSize = windowSize, numOfVars = 8, 1, c(-2:2))
D = cbind(obj$X,obj$Y)
write.table(D, file = "NNtrainingMultiClass.csv", sep=",", col.names = T, row.names = F)
C = cbind(obj$X,obj$Y_noFrame)
write.table(C, file = "NNtrainingMultiClassNoFrame.csv", sep=",", col.names = T, row.names = F)
p = obj$X[which(obj$Y_noFrame == colClass),]
q = colMeans(p, na.rm=TRUE)
q_acc_x = q[seq(1,length(q),8)]
q_acc_y = q[seq(2,length(q),8)]
q_acc_z = q[seq(3,length(q),8)]
q_g_x = q[seq(4,length(q),8)]
q_g_y = q[seq(5,length(q),8)]
q_g_z = q[seq(6,length(q),8)]
p2 = obj$X[which(obj$Y_noFrame != colClass),]
q2 = colMeans(p2, na.rm=TRUE)
q2_acc_x = q2[seq(1,length(q),8)]
q2_acc_y = q2[seq(2,length(q),8)]
q2_acc_z = q2[seq(3,length(q),8)]
q2_g_x = q2[seq(4,length(q),8)]
q2_g_y = q2[seq(5,length(q),8)]
q2_g_z = q2[seq(6,length(q),8)]
pdf("ColVsNoCol.pdf")
par(mfrow =c(2,1))
plot(q_acc_y, type = "l", col = "green", main = "collision")
points(q_acc_x, type = "l", col = "red")
points(q_acc_z, type = "l", col = "blue")
points(q2_acc_y, type = "l", lty = 2, col = "green", main = "collision")
points(q2_acc_x, type = "l", lty = 2, col = "red")
points(q2_acc_z, type = "l", lty = 2, col = "blue")
plot(q_g_x, type = "l", col = "green", main = "collision")
points(q_g_y, type = "l", col = "red")
points(q_g_z, type = "l", col = "blue")
points(q2_g_x, type = "l", lty = 2, col = "green", main = "collision")
points(q2_g_y, type = "l", lty = 2, col = "red")
points(q2_g_z, type = "l", lty = 2, col = "blue")
dev.off()
plotWithoutCollision(data, viewSize*10, 9500, c(-10,30), c(-90,20))
plotWithoutCollision(data, viewSize*10, 9500, c(-10,30), c(-90,20))
setwd("/home/willy/10.Semester/Robotik/MyRobot/SerialPortListener/Real2")
str1 = sub(".*/", "", wd)
str1 = sub("[0-9]+", "", str1)
str1
colClass = 1
if(str1 == "s"){
colClass = 2
} else if(str1 == "f"){
colClass = 3
} else if(str1 == "t"){
colClass = 4
}
data = read.table("output.txt", col.names = c("arduinoTime", "accX", "accY", "accZ", "gyroX", "gyroY", "gyroZ", "lmspeed", "rmspeed", "collision", "pythonTime"), fill = TRUE)
data = na.omit(data)
plotSize = c(min(data$accX,data$accY, data$accZ), max(data$accX,data$accY, data$accZ))
collisionCenters = which(data$collision == 1)
length(collisionCenters)
#windowSize = 40
viewSize = 100
oldInd = 1
if(length(collisionCenters) != 0){
for(ind in 1:length(collisionCenters)){
if(oldInd == ind || collisionCenters[oldInd] + windowSize <= collisionCenters[ind]){
print(paste(collisionCenters[oldInd], " != ", collisionCenters[ind]))
print(paste("collision ", ind, " / ", length(collisionCenters)))
offSet = predictOffSet(data,collisionCenters[ind],viewSize = viewSize/2.0, 2)
adjustCollision(data,plotSize = plotSize,collisionCenter = collisionCenters[ind], windowSize = windowSize, viewSize = viewSize, offSet = offSet)
data = changeCollisionInData(data,collisionCenters[ind],collisionCenters[ind]+offSet, windowSize = windowSize, viewSize = viewSize, ind = ind, colClass = colClass)
}
else{
data = removeCollision(data,collisionCenters[ind])
}
oldInd = ind
}
}
#----------------------------------------------------------------------------------
# this was good
#----------------------------------------------------------------------------------
obj = generateNNTrainingsData(data,windowSize = windowSize, numOfVars = 8, 1, c(-2:2))
D = cbind(obj$X,obj$Y)
write.table(D, file = "NNtrainingMultiClass.csv", sep=",", col.names = T, row.names = F)
C = cbind(obj$X,obj$Y_noFrame)
write.table(C, file = "NNtrainingMultiClassNoFrame.csv", sep=",", col.names = T, row.names = F)
p = obj$X[which(obj$Y_noFrame == colClass),]
q = colMeans(p, na.rm=TRUE)
q_acc_x = q[seq(1,length(q),8)]
q_acc_y = q[seq(2,length(q),8)]
q_acc_z = q[seq(3,length(q),8)]
q_g_x = q[seq(4,length(q),8)]
q_g_y = q[seq(5,length(q),8)]
q_g_z = q[seq(6,length(q),8)]
p2 = obj$X[which(obj$Y_noFrame != colClass),]
q2 = colMeans(p2, na.rm=TRUE)
q2_acc_x = q2[seq(1,length(q),8)]
q2_acc_y = q2[seq(2,length(q),8)]
q2_acc_z = q2[seq(3,length(q),8)]
q2_g_x = q2[seq(4,length(q),8)]
q2_g_y = q2[seq(5,length(q),8)]
q2_g_z = q2[seq(6,length(q),8)]
pdf("ColVsNoCol.pdf")
par(mfrow =c(2,1))
plot(q_acc_y, type = "l", col = "green", main = "collision")
points(q_acc_x, type = "l", col = "red")
points(q_acc_z, type = "l", col = "blue")
points(q2_acc_y, type = "l", lty = 2, col = "green", main = "collision")
points(q2_acc_x, type = "l", lty = 2, col = "red")
points(q2_acc_z, type = "l", lty = 2, col = "blue")
plot(q_g_x, type = "l", col = "green", main = "collision")
points(q_g_y, type = "l", col = "red")
points(q_g_z, type = "l", col = "blue")
points(q2_g_x, type = "l", lty = 2, col = "green", main = "collision")
points(q2_g_y, type = "l", lty = 2, col = "red")
points(q2_g_z, type = "l", lty = 2, col = "blue")
dev.off()
plotWithoutCollision(data, viewSize*10, 9500, c(-10,30), c(-90,20))
setwd("/home/willy/10.Semester/Robotik/MyRobot/Trex2")
h1 = read.table("h1.txt", sep = ",")
h1_first_half = h1
accX = h1_first_half[seq(1,320,8)]
accX = h1_first_half[seq(1,272,8)]
accX = h1_first_half[seq(1,232,8)]
accX = h1_first_half[seq(1,232,8)]
h1_first_half = h1
accX = h1_first_half[seq(1,232,8)]
plot(h1)
plot(h1)
plot(h1, ylim ) c(-100,100))
plot(h1, ylim = c(-100,100))
h1
plot(h1[,1], ylim = c(-100,100))
plot(h1[,1])
setwd("/home/willy/10.Semester/Robotik/MyRobot/Trex2")
h1 = read.table("h1.txt", sep = ",")
h1_first_half = h1
plot(h1_first_half)
plot(h1[,1])
max(h1[,1])
